generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(cuid())
  clerkId           String           @unique
  email             String           @unique
  firstName         String?
  lastName          String?
  imageUrl          String?
  role              UserRole         @default(CLIENT)
  producerName      String?
  bio               String?
  websiteUrl        String?
  twitterUrl        String?
  instagramUrl      String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  organizedEvents   Event[]          @relation("EventOrganizer")
  tickets           Ticket[]
  orders            Order[]
  createdPromoCodes PromoCode[]      @relation("CreatedPromoCodes")
  promoCodeUsages   PromoCodeUsage[]
  roleRequests      RoleRequest[]
  assignedEvents    EventScanner[]   @relation("ScannerEvents")
  assignedScanners  EventScanner[]   @relation("AssignedBy")

  @@map("users")
}

model Category {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  events      Event[]
  promoCodes  PromoCode[]

  @@map("categories")
}

model EventScanner {
  id         String   @id @default(cuid())
  eventId    String
  scannerId  String
  assignedBy String
  assignedAt DateTime @default(now())
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  scanner    User     @relation("ScannerEvents", fields: [scannerId], references: [id], onDelete: Cascade)
  assigner   User     @relation("AssignedBy", fields: [assignedBy], references: [id], onDelete: Cascade)

  @@unique([eventId, scannerId])
  @@map("event_scanners")
}

model Event {
  id               String         @id @default(cuid())
  title            String
  description      String?
  imageUrl         String?
  location         String
  startDate        DateTime
  endDate          DateTime?
  price            Float          @default(0)
  currency         String         @default("CLP")
  capacity         Int
  isPublished      Boolean        @default(false)
  isFree           Boolean        @default(false)
  totalRevenue     Float?
  totalCommissions Float?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  organizerId      String
  organizer        User           @relation("EventOrganizer", fields: [organizerId], references: [id], onDelete: Cascade)
  categoryId       String
  category         Category       @relation(fields: [categoryId], references: [id])
  tickets          Ticket[]
  orders           Order[]
  ticketTypes      TicketType[]
  scanners         EventScanner[]
  promoCodes       PromoCode[]

  @@map("events")
}

model Ticket {
  id        String       @id @default(cuid())
  qrCode    String       @unique
  isUsed    Boolean      @default(false)
  usedAt    DateTime?
  status    TicketStatus @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  eventId      String
  event        Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderId      String
  order        Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  ticketTypeId String?
  ticketType   TicketType? @relation(fields: [ticketTypeId], references: [id], onDelete: SetNull)

  @@map("tickets")
}

model TicketType {
  id               String           @id @default(cuid())
  name             String
  description      String?
  price            Float
  currency         String           @default("CLP")
  capacity         Int
  ticketsGenerated Int              @default(1)
  status           TicketTypeStatus @default(AVAILABLE)
  eventId          String
  event            Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tickets          Ticket[]
  promoCodes       PromoCode[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@map("ticket_types")
}

model PromoCode {
  id                String          @id @default(cuid())
  code              String          @unique
  name              String
  description       String?
  type              PromoCodeType   @default(PERCENTAGE)
  value             Float
  minOrderAmount    Float?
  maxDiscountAmount Float?
  currency          String          @default("CLP")
  status            PromoCodeStatus @default(ACTIVE)
  usageLimit        Int?
  usedCount         Int             @default(0)
  usageLimitPerUser Int?
  validFrom         DateTime
  validUntil        DateTime?

  eventId      String?
  event        Event?      @relation(fields: [eventId], references: [id], onDelete: SetNull)
  categoryId   String?
  category     Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  ticketTypeId String?
  ticketType   TicketType? @relation(fields: [ticketTypeId], references: [id], onDelete: SetNull)

  createdBy String
  creator   User     @relation("CreatedPromoCodes", fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  usages PromoCodeUsage[]

  @@index([eventId])
  @@index([categoryId])
  @@index([status])
  @@index([validFrom, validUntil])
  @@map("promo_codes")
}

model PromoCodeUsage {
  id          String    @id @default(cuid())
  promoCodeId String
  promoCode   PromoCode @relation(fields: [promoCodeId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderId     String    @unique
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)

  discountAmount Float
  originalAmount Float
  finalAmount    Float

  usedAt    DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([promoCodeId])
  @@index([userId])
  @@map("promo_code_usages")
}

enum PromoCodeType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE
}

enum PromoCodeStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  USED_UP
}

model Payment {
  id                String    @id @default(cuid())
  orderId           String    @unique
  transactionId     String    @unique
  token             String?
  amount            Float
  currency          String    @default("CLP")
  status            String    @default("PENDING")
  paymentMethod     String?
  authorizationCode String?
  responseCode      Int?
  transactionDate   DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Order {
  id               String          @id @default(cuid())
  orderNumber      String          @unique
  totalAmount      Float
  baseAmount       Float?
  commissionAmount Float?
  currency         String          @default("CLP")
  quantity         Int
  status           OrderStatus     @default(PENDING)
  paymentIntentId  String?         @unique
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  userId           String
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId          String
  event            Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tickets          Ticket[]
  payment          Payment?
  Commission       Commission[]
  promoCodeUsage   PromoCodeUsage?
  discountAmount   Float?
  originalAmount   Float?

  @@map("orders")
}

model RoleRequest {
  id            String            @id @default(cuid())
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  currentRole   UserRole
  requestedRole UserRole
  message       String
  status        RoleRequestStatus @default(PENDING)
  reviewedBy    String?
  reviewedAt    DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@map("role_requests")
}

model Commission {
  id         String         @id @default(cuid())
  orderId    String
  order      Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  type       CommissionType @default(PLATFORM_FEE)
  baseAmount Float
  rate       Float
  amount     Float
  currency   String         @default("CLP")
  status     String         @default("PENDING")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("commissions")
}

enum UserRole {
  CLIENT
  ORGANIZER
  SCANNER
  ADMIN
}

enum RoleRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TicketTypeStatus {
  AVAILABLE
  SOLD_OUT
  HIDDEN
}

enum TicketStatus {
  ACTIVE
  CANCELLED
  REFUNDED
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  REFUNDED
}

enum CommissionType {
  PLATFORM_FEE
  PROCESSING_FEE
  PROMOTIONAL

  @@map("commission_types")
}
